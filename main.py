from flask import Flask, request, jsonify, make_response
import ipaddress, struct
app = Flask(__name__)

# Perform IPv6-RD calculation
def calc_customer_ipv6_prefix(customer_ipv4_addr_str, isp_ipv6_prefix_str):
    isp_prefix = ipaddress.ip_network(isp_ipv6_prefix_str)
    customer_ipv4_addr = ipaddress.ip_address(customer_ipv4_addr_str)
    offset = struct.unpack("!I", customer_ipv4_addr.packed)[0] << (96 - isp_prefix.prefixlen)
    return str(isp_prefix.network_address + offset)

def build_usg_template(customer_ipv4_wan_addr_str, customer_ipv4_lan_addr_str, isp_ipv6_prefix_str = "2602::/24"):
    """
    This template originally generated by u/CraigFL on r/Ubiquiti
    https://www.reddit.com/r/Ubiquiti/comments/9dyjep/tutorial_ipv6_through_centurylink_via_6rd_on/
    """
    customer_ipv6_prefix = calc_customer_ipv6_prefix(customer_ipv4_wan_addr_str, isp_ipv6_prefix_str)

    return {
        "interfaces": {
            "ethernet": {
                "eth1": {
                    "address": [
                        customer_ipv4_lan_addr_str,
                        customer_ipv6_prefix + "::1/64",
                    ],
                    "ipv6": {
                        "dup-addr-detect-transmits": "1",
                        "router-advert": {
                            "cur-hop-limit": "64",
                            "link-mtu": "0",
                            "managed-flag": "false",
                            "max-interval": "300",
                            "name-server": [
                                # Google IPv6 DNS
                                "2001:4860:4860::8888",
                                "2001:4860:4860::8844",
                                # Cloudflare IPv6 DNS
                                "2606:4700:4700::1111",
                                "2606:4700:4700::1001"
                            ],
                            "other-config-flag": "false",
                            "prefix": {
                                customer_ipv6_prefix + "::1/64": {
                                    "autonomous-flag": "true",
                                    "on-link-flag": "true",
                                    "valid-lifetime": "3600"
                                }
                            },
                            "reachable-time": "0",
                            "retrans-timer": "0",
                            "send-advert": "true"
                        }
                    }
                }
            },
            "tunnel": {
                "tun0": {
                    "6rd-default-gw": "::" + customer_ipv4_wan_addr_str,
                    "6rd-prefix": isp_ipv6_prefix_str,
                    "address": [
                        customer_ipv6_prefix + "::1/24"
                    ],
                    "description": "CenturyLink IPv6 6rd tunnel",
                    "encapsulation": "sit",
                    "firewall": {
                        "in": {
                            "ipv6-name": "WANv6_IN",
                        },
                        "local": {
                            "ipv6-name": "WANv6_LOCAL",
                        },
                        "out": {
                            "ipv6-name": "WANv6_OUT",
                        }
                    },
                    "local-ip": customer_ipv4_lan_addr_str,
                    "mtu": "1472",
                    "multicast": "disable",
                    "ttl": "255"
                }
            }
        }
    }

@app.route('/config.gateway.json')
def config():
    response = make_response(jsonify(build_usg_template(
        request.args.get('customer_ipv4_wan_addr'),
        request.args.get('customer_ipv4_lan_addr'),
        request.args.get('isp_ipv6_prefix'),
    )))
    response.headers['Content-Type'] = 'text/json'
    response.headers['Content-Disposition'] = 'attachment; filename=config.gateway.json'
    return response

@app.route('/ipaddr')
def ipaddr():
    ip = str(request.remote_addr)
    if 'X-Real-IP' in request.headers:
        ip = request.headers.get("X-Real-IP")
    return jsonify({"ipaddr": ip})

@app.route('/')
def hello_world():
    return open("index.html").read()
